#pragma checksum "C:\Users\Admin\RiderProjects\ASP.NET\WebApplicationNet5\WebApplicationNet5\Views\Ajax\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "38b11426097fc89097cb4dfefa37ed4acdf5793e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Ajax_Index), @"mvc.1.0.view", @"/Views/Ajax/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Admin\RiderProjects\ASP.NET\WebApplicationNet5\WebApplicationNet5\Views\_ViewImports.cshtml"
using WebApplicationNet5;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Admin\RiderProjects\ASP.NET\WebApplicationNet5\WebApplicationNet5\Views\_ViewImports.cshtml"
using WebApplicationNet5.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"38b11426097fc89097cb4dfefa37ed4acdf5793e", @"/Views/Ajax/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"109435be5ff4aad5166abc3cc17f6f2308af6d28", @"/Views/_ViewImports.cshtml")]
    public class Views_Ajax_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Admin\RiderProjects\ASP.NET\WebApplicationNet5\WebApplicationNet5\Views\Ajax\Index.cshtml"
  
    ViewData["Title"] = "Ajax Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Welcome Ajax</h1>
</div>

<main id=""main"">

</main>

<div id=""TeachersContainer"">
    Load...
</div>

<div id=""newTeacher"" class=""d-flex justify-content-center mt-5"">
    <div class=""input-group mb-3 w-50"">
        <div class=""input-group-prepend"">
            <span class=""input-group-text"" id=""basic-addon1"">Name</span>
        </div>
        <input id=""inputTeacherName"" type=""text"" class=""form-control"" placeholder=""Name"" aria-label=""Name"" aria-describedby=""basic-addon1"">
        <button type=""button"" class=""btn btn-primary"" id=""btnCreateTeacher"">Create</button>
    </div>
</div>

<div id=""GroupsContainer"">
    Load...
</div>

<div id=""newGroup"" class=""d-flex justify-content-center mt-5"">
    <div class=""input-group mb-3 w-50"">
        <div class=""input-group-prepend"">
            <span class=""input-group-text"" id=""basic-addon2"">Name</span>
        </div>
        <input id=""inputGroupName"" type=""text"" class=""form-control"" pla");
            WriteLiteral(@"ceholder=""Name"" aria-label=""Name"" aria-describedby=""basic-addon2"">
        <select class=""form-select"" id=""selectTeacherForGroup""></select>
        <button type=""button"" class=""btn btn-primary"" id=""btnCreateGroup"">Create</button>
    </div>
</div>


<div id=""StudentsContainer"">
    Load...
</div>

<div id=""newStudent"" class=""d-flex justify-content-center mt-5"">
    <div class=""input-group mb-3 w-50"">
        <div class=""input-group-prepend"">
            <span class=""input-group-text"" id=""basic-addon3"">Name</span>
        </div>
        <input id=""inputStudentName"" type=""text"" class=""form-control"" placeholder=""Name"" aria-label=""Name"" aria-describedby=""basic-addon3"">
        <select class=""form-select"" id=""selectGroupForStudent""></select>
        <button type=""button"" class=""btn btn-primary"" id=""btnCreateStudent"">Create</button>
    </div>
</div>

<script src=""js/HtmlTableGenerator.js""></script>

<script>
    console.log(""Ajax Ready"");
    
    Refresh()
    
    function Refresh() ");
            WriteLiteral(@"{
        fetchGetTeachers();
        fetchGetGroups();
        fetchGetFreeTeachers();
        fetchGetStudents();
        renderGroupsSelection();
        renderTeachersSelection();
    }
    
    setRefresh(Refresh);
    
    document.querySelector(""#btnCreateTeacher"").onclick = function () {
        let newTeacher = {
            id: 0,
            name: document.querySelector(""#inputTeacherName"").value
        };
        Create(newTeacher, ""api/teachers"", fetchGetTeachers)
        document.querySelector(""#inputTeacherName"").value = """";
    }
    
    document.querySelector(""#btnCreateGroup"").onclick = function () {
        let newGroup = {
            id: 0,
            name: document.querySelector(""#inputGroupName"").value,
            teacherId: document.querySelector(""#selectTeacherForGroup"").value
        };
        Create(newGroup, ""api/groups"", fetchGetGroups)
        document.querySelector(""#inputGroupName"").value = """";
    }
    
    document.querySelector(""#btnCreate");
            WriteLiteral(@"Student"").onclick = function () {
        let newStudent = {
            id: 0,
            name: document.querySelector(""#inputStudentName"").value,
            groupId: document.querySelector(""#selectGroupForStudent"").value
        };
        Create(newStudent, ""api/students"", fetchGetStudents)
        document.querySelector(""#inputStudentName"").value = """";
    }
    
    function renderTeachersList(teachers) {
        RenderTable(
                    GetHtmlTable(
                    {
                        collection: teachers,
                        renamed: { groupName: ""Group"" },
                        editable: 
                            {
                                name: { type: ""text"" },
                            },
                        path: ""api/teachers/""
                    }
                ), ""TeachersContainer"");
        console.log(""Teachers successfully loaded!"");
    }
    
    function renderGroupsList(groups) {
        RenderTable(
            G");
            WriteLiteral(@"etHtmlTable(
            {
                collection: groups,
                hidden: [""teacherName""],
                renamed: {teacherId: ""Teacher""},
                editable: {
                        name: { type: ""text"" },
                        teacherId: { 
                            type: ""dropDown"",
                            source: ""api"",
                            path: ""/api/teachers/"",
                            defaultValue: ""teacherId"",
                            defaultText: ""teacherName"",
                            value: ""id"",
                            text: ""name"",
                            filter: (t => t.groupName === ""No group"")
                        },
                },
                path: ""api/groups/""
            }
        ), ""GroupsContainer"");
        console.log(""Groups successfully loaded!"");
    }
    
    function renderStudentsList(students) {
        RenderTable(
            GetHtmlTable(
            {
                collection: s");
            WriteLiteral(@"tudents,
                hidden: [""groupName""],
                renamed: {groupId: ""Group""},
                editable: {
                        name: { type: ""text"" },
                        groupId: { 
                            type: ""dropDown"",
                            source: ""api"",
                            path: ""/api/groups/"",
                            defaultValue: ""groupId"",
                            defaultText: ""groupName"",
                            value: ""id"",
                            text: ""name""
                        }
                },
                path: ""api/students/""
            } 
        ), ""StudentsContainer"");
        console.log(""Students successfully loaded!"");
    }
    function renderGroupsSelection() {        
        FetchGetJson(""/api/Groups"", 
        (groups) =>{ AddSelectOptions(""selectGroupForStudent"", groups, ""id"", ""name"") })        
    }
    
    function renderTeachersSelection() {
        FetchGetJson(""/api/Groups"", 
    ");
            WriteLiteral(@"    (teachers) =>{ AddSelectOptions(""selectTeacherForGroup"", teachers.filter(t => t.groupName === ""No group""), ""id"", ""name"") })
    }
    
    
    function fetchGetTeachers() {
        console.log(""Teachers loading..."");
        FetchGetJson(""/api/teachers"", renderTeachersList);
  
    }
    
    function fetchGetGroups() {  
        console.log(""Groups loading..."");
        FetchGetJson(""/api/groups"", renderGroupsList);
    }
    function fetchGetStudents() {  
        console.log(""Students loading..."");
        FetchGetJson(""/api/students"", renderStudentsList);
    }
    
    function fetchGetFreeTeachers(teachers) {
        FetchGetJson(""/api/teachers"", (collection) => 
        AddSelectOptions(""selectTeacherForGroup"", collection.filter(t => t.groupName === ""No group""), ""id"", ""name""));
    }

    
    function AddSelectOptions(selectId ,collection, value, text)
    {
        let select = document.querySelector(""#"" + selectId)        
        select.innerHTML = """";
        for ");
            WriteLiteral(@"(const item of collection) {
            let option = document.createElement(""option"");
            option.value = item[value];
            option.innerText = item[text];
            select.append(option);
        }        
    }
    
   
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
